#!/usr/bin/env php
<?php

namespace alikecolor;

$files = array(
	__DIR__ . '/../../vendor/autoload.php',
	__DIR__ . '/../../../../autoload.php'
);

foreach( $files as $file ) {
	if( file_exists($file) ) {
		require($file);
		break;
	}
}

$flags = new \donatj\Flags();

$tolerance =& $flags->uint('tolerance', 5, 'Computed Difference Tolerance - default 5');
$exitCode  =& $flags->uint('exit-code', 2, 'Exit code to raise on alike. 0 for no exit code');
$help      =& $flags->bool('help', false, 'Displays this message');

try {
	$flags->parse();
	if( $help ) {
		$exitCode = 0;
		throw new \Exception;
	}
	foreach( $flags->args() as $arg ) {
		if( !is_readable($arg) ) {
			throw new \Exception("error: Cannot read file: {$arg}");
		}
	}
} catch(\Exception $e) {
	echo ltrim($e->getMessage() . PHP_EOL . PHP_EOL) . "usage: {$argv[0]} [<files>]\n" . $flags->getDefaults() . PHP_EOL;
	die($exitCode);
}


if( $flags->args() ) {
	$subject = "";
	foreach( $flags->args() as $arg ) {
		$subject .= file_get_contents($arg);
	}
} else {
	$subject = file_get_contents("php://stdin");
}


$af   = new \donatj\AlikeColorFinder\AlikeColorFinder($subject);
$data = $af->getAlikeColorsWithinTolerance($tolerance, $errors);

if( $data || $errors ) {
	displayDiff($data, fopen('php://output', 'w'));

	foreach( $errors as $error ) {
		echo "Error: {$error['result'][0]}: {$error['exception']->getMessage()}\n";
	}
	exit($exitCode);
} else {
	echo "No alike colors found!\n";
}



function displayDiff( $data, $stream ) {

	foreach( $data as $colorSet ) {
		/**
		 * @var $colorOne \donatj\AlikeColorFinder\ColorEntry
		 * @var $colorTwo \donatj\AlikeColorFinder\ColorEntry
		 */
		$colorOne = $colorSet['master'];
		foreach( $colorSet['children'] as $childEntry ) {
			$colorTwo = $childEntry['color'];

			$oneString = "({$colorOne->getInstanceTotal()}) {$colorOne->getSimplestCssString()}";
			$twoString = "({$colorTwo->getInstanceTotal()}) {$colorTwo->getSimplestCssString()}";

			if( $colorOne->getInstanceTotal() > $colorTwo->getInstanceTotal() ) {
				$oneString = "*" . $oneString;
			} elseif( $colorOne->getInstanceTotal() < $colorTwo->getInstanceTotal() ) {
				$twoString = "* " . $twoString;
			}

			fwrite($stream, sprintf(" %30s %30s   diff: %d\n", $oneString, $twoString, $childEntry['diff']));

			$oneOrig = $colorOne->getDistinctInstances();
			$twoOrig = $colorTwo->getDistinctInstances();

			$max = max(count($oneOrig), count($twoOrig));

			for( $i = 0; $i < $max; $i++ ) {
				$oneString = !empty($oneOrig[$i]) ? $oneOrig[$i] : "";
				$twoString = !empty($twoOrig[$i]) ? $twoOrig[$i] : "";

				fwrite($stream, sprintf(" %30s %30s\n", $oneString, $twoString));
			}

			fwrite($stream, "\n");
		}
	}
}