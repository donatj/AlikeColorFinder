#!/usr/bin/env php
<?php

namespace alikecolor;

use donatj\AlikeColorFinder\AlikeColorFinder;
use donatj\AlikeColorFinder\ColorDiffStrategy\Absolute;
use donatj\AlikeColorFinder\ColorDiffStrategy\Cie94WithAlpha;
use donatj\AlikeColorFinder\ColorDiffStrategy\CieDe2000WithAlpha;
use donatj\AlikeColorFinder\ColorEntry;
use donatj\AlikeColorFinder\CssColorExtractor;
use donatj\AlikeColorFinder\Exceptions\CliException;

$files = [
	__DIR__ . '/../../vendor/autoload.php',
	__DIR__ . '/../../../../autoload.php',
];

foreach( $files as $file ) {
	if( file_exists($file) ) {
		require $file;
		break;
	}
}

$stdout = fopen('php://output', 'w');
$stderr = fopen('php://stderr', 'w');

$flags = new \donatj\Flags();

$optionStrategy  =& $flags->string('strategy', 'ciede2000', 'Color diff strategy.
            Options:
                actual
                cie94
                ciede2000 [default - aka. perceptual]');
$optionTolerance =& $flags->float('tolerance', 4, 'Computed Difference Tolerance - default 4');
$optionExitCode  =& $flags->uint('exit-code', 2, 'Exit code to raise on alike. 0 for no exit code');
$optionRegex     =& $flags->string('glob', '/(\\.css|\\.scss|\\.less|\\.styl|\\.pcss)$/i', 'Regex pattern to match files against when argument is a directory');
$optionHelp      =& $flags->bool('help', false, 'Displays this message');

$fileIterator = new \AppendIterator();

try {
	$flags->parse();

	if( $optionHelp ) {
		$optionExitCode = 0;
		throw new CliException;
	}
	foreach( $flags->args() as $arg ) {
		if( !is_readable($arg) ) {
			throw new CliException("error: Cannot read file: {$arg}");
		}

		if( is_dir($arg) ) {
			$dir   = new \RecursiveDirectoryIterator($arg);
			$ite   = new \RecursiveIteratorIterator($dir);
			$match = new \RegexIterator($ite, $optionRegex);

			$fileIterator->append($match);
		} else {
			$fileIterator->append(new \ArrayIterator([
				new \SplFileInfo($arg),
			]));
		}
	}

	switch( $optionStrategy ) {
		case 'perceptual':
		case 'ciede2000':
			$diffStrategy = new CieDe2000WithAlpha;
			break;
		case 'cie94':
			$diffStrategy = new Cie94WithAlpha;
			break;
		case 'actual':
			$diffStrategy = new Absolute;
			break;
		default:
			throw new CliException("Unknown diff strategy: {$optionStrategy}");
	}
} catch( \Exception $e ) {
	fwrite($stderr, ltrim($e->getMessage() . PHP_EOL . PHP_EOL) . "usage: {$argv[0]} [<files>] [<dirs>]\n" . $flags->getDefaults() . PHP_EOL);
	die($optionExitCode);
}

/**
 * @var $colorFiles \SplFileInfo[]
 */
$colorFiles = iterator_to_array($fileIterator, false);
if( $colorFiles ) {
	$subject = '';
	foreach( $colorFiles as $arg ) {
		$subject .= file_get_contents($arg->getRealPath());
	}
} else {
	fwrite($stderr, "No files specified, reading from stdin...\n");
	$subject = file_get_contents('php://stdin');
}

$cce    = new CssColorExtractor($subject);
$colors = $cce->extractColors($errors);

$af   = new AlikeColorFinder($colors, null, $diffStrategy);
$data = $af->getAlikeColorsWithinTolerance($optionTolerance);

displayDiff($data, $stdout);

foreach( $errors as $error ) {
	fwrite($stdout, "Error: {$error['result'][0]}: {$error['exception']->getMessage()}\n");
}

list($sum, $count) = getDiffStats($data);

$uniqueColors = count($colors);
$totalColors  = array_reduce($colors, function( $carry, ColorEntry $item ) {
	return $carry + $item->getInstanceTotal();
}, 0);

$avg = number_format($sum == 0 ? 0 : $count / $sum, 3);
fwrite($stdout, "Total alike colors: {$count} - Average Δ: {$avg} - Total colors: {$totalColors} - Distinct colors: {$uniqueColors}\n");

if( $data || $errors ) {
	exit($optionExitCode);
}

function displayDiff( $data, $stream ) {

	foreach( $data as $colorSet ) {
		/**
		 * @var $colorOne \donatj\AlikeColorFinder\ColorEntry
		 * @var $colorTwo \donatj\AlikeColorFinder\ColorEntry
		 */
		$colorOne = $colorSet['master'];
		foreach( $colorSet['children'] as $childEntry ) {
			$colorTwo = $childEntry['color'];

			$oneString = "({$colorOne->getInstanceTotal()}) {$colorOne->getSimplestCssString()}";
			$twoString = "({$colorTwo->getInstanceTotal()}) {$colorTwo->getSimplestCssString()}";

			if( $colorOne->getInstanceTotal() > $colorTwo->getInstanceTotal() ) {
				$oneString = '*' . $oneString;
			} elseif( $colorOne->getInstanceTotal() < $colorTwo->getInstanceTotal() ) {
				$twoString = '* ' . $twoString;
			}

			fwrite($stream, sprintf(" %30s %30s   Δ: %s\n", $oneString, $twoString, number_format((float)$childEntry['diff'], 3)));

			$oneOrig = $colorOne->getDistinctInstances();
			$twoOrig = $colorTwo->getDistinctInstances();

			$max = max(count($oneOrig), count($twoOrig));

			for( $i = 0; $i < $max; $i++ ) {
				$oneString = !empty($oneOrig[$i]) ? $oneOrig[$i] : '';
				$twoString = !empty($twoOrig[$i]) ? $twoOrig[$i] : '';

				fwrite($stream, sprintf(" %30s %30s\n", $oneString, $twoString));
			}

			fwrite($stream, "\n");
		}
	}
}


function getDiffStats( $data ) : array {
	$sum   = 0;
	$count = 0;
	foreach( $data as $items ) {
		foreach( $items['children'] as $child ) {
			$sum   += $child['diff'];
			$count += 1;
		}
	}

	return [ $sum, $count ];
}
